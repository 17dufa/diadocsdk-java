// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SignatureVerificationResult.proto

package Diadoc.Api.Proto;

public final class SignatureVerificationResultProtos {
  private SignatureVerificationResultProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SignatureVerificationResultOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required bool IsValid = 1;
    boolean hasIsValid();
    boolean getIsValid();
    
    // optional .Diadoc.Api.Proto.CertificateVerificationResult CertificateStatus = 2;
    boolean hasCertificateStatus();
    Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult getCertificateStatus();
    Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResultOrBuilder getCertificateStatusOrBuilder();
    
    // optional .Diadoc.Api.Proto.Timestamp SignatureTimestamp = 3;
    boolean hasSignatureTimestamp();
    Diadoc.Api.Proto.TimestampProtos.Timestamp getSignatureTimestamp();
    Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder getSignatureTimestampOrBuilder();
  }
  public static final class SignatureVerificationResult extends
      com.google.protobuf.GeneratedMessage
      implements SignatureVerificationResultOrBuilder {
    // Use SignatureVerificationResult.newBuilder() to construct.
    private SignatureVerificationResult(Builder builder) {
      super(builder);
    }
    private SignatureVerificationResult(boolean noInit) {}
    
    private static final SignatureVerificationResult defaultInstance;
    public static SignatureVerificationResult getDefaultInstance() {
      return defaultInstance;
    }
    
    public SignatureVerificationResult getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_SignatureVerificationResult_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_SignatureVerificationResult_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required bool IsValid = 1;
    public static final int ISVALID_FIELD_NUMBER = 1;
    private boolean isValid_;
    public boolean hasIsValid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public boolean getIsValid() {
      return isValid_;
    }
    
    // optional .Diadoc.Api.Proto.CertificateVerificationResult CertificateStatus = 2;
    public static final int CERTIFICATESTATUS_FIELD_NUMBER = 2;
    private Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult certificateStatus_;
    public boolean hasCertificateStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult getCertificateStatus() {
      return certificateStatus_;
    }
    public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResultOrBuilder getCertificateStatusOrBuilder() {
      return certificateStatus_;
    }
    
    // optional .Diadoc.Api.Proto.Timestamp SignatureTimestamp = 3;
    public static final int SIGNATURETIMESTAMP_FIELD_NUMBER = 3;
    private Diadoc.Api.Proto.TimestampProtos.Timestamp signatureTimestamp_;
    public boolean hasSignatureTimestamp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public Diadoc.Api.Proto.TimestampProtos.Timestamp getSignatureTimestamp() {
      return signatureTimestamp_;
    }
    public Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder getSignatureTimestampOrBuilder() {
      return signatureTimestamp_;
    }
    
    private void initFields() {
      isValid_ = false;
      certificateStatus_ = Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.getDefaultInstance();
      signatureTimestamp_ = Diadoc.Api.Proto.TimestampProtos.Timestamp.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasIsValid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasCertificateStatus()) {
        if (!getCertificateStatus().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSignatureTimestamp()) {
        if (!getSignatureTimestamp().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, isValid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, certificateStatus_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, signatureTimestamp_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isValid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, certificateStatus_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, signatureTimestamp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_SignatureVerificationResult_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_SignatureVerificationResult_fieldAccessorTable;
      }
      
      // Construct using Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCertificateStatusFieldBuilder();
          getSignatureTimestampFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        isValid_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (certificateStatusBuilder_ == null) {
          certificateStatus_ = Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.getDefaultInstance();
        } else {
          certificateStatusBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (signatureTimestampBuilder_ == null) {
          signatureTimestamp_ = Diadoc.Api.Proto.TimestampProtos.Timestamp.getDefaultInstance();
        } else {
          signatureTimestampBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult.getDescriptor();
      }
      
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult getDefaultInstanceForType() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult.getDefaultInstance();
      }
      
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult build() {
        Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult buildPartial() {
        Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult result = new Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isValid_ = isValid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (certificateStatusBuilder_ == null) {
          result.certificateStatus_ = certificateStatus_;
        } else {
          result.certificateStatus_ = certificateStatusBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (signatureTimestampBuilder_ == null) {
          result.signatureTimestamp_ = signatureTimestamp_;
        } else {
          result.signatureTimestamp_ = signatureTimestampBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult) {
          return mergeFrom((Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult other) {
        if (other == Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult.getDefaultInstance()) return this;
        if (other.hasIsValid()) {
          setIsValid(other.getIsValid());
        }
        if (other.hasCertificateStatus()) {
          mergeCertificateStatus(other.getCertificateStatus());
        }
        if (other.hasSignatureTimestamp()) {
          mergeSignatureTimestamp(other.getSignatureTimestamp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasIsValid()) {
          
          return false;
        }
        if (hasCertificateStatus()) {
          if (!getCertificateStatus().isInitialized()) {
            
            return false;
          }
        }
        if (hasSignatureTimestamp()) {
          if (!getSignatureTimestamp().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isValid_ = input.readBool();
              break;
            }
            case 18: {
              Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.Builder subBuilder = Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.newBuilder();
              if (hasCertificateStatus()) {
                subBuilder.mergeFrom(getCertificateStatus());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCertificateStatus(subBuilder.buildPartial());
              break;
            }
            case 26: {
              Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder subBuilder = Diadoc.Api.Proto.TimestampProtos.Timestamp.newBuilder();
              if (hasSignatureTimestamp()) {
                subBuilder.mergeFrom(getSignatureTimestamp());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSignatureTimestamp(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required bool IsValid = 1;
      private boolean isValid_ ;
      public boolean hasIsValid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public boolean getIsValid() {
        return isValid_;
      }
      public Builder setIsValid(boolean value) {
        bitField0_ |= 0x00000001;
        isValid_ = value;
        onChanged();
        return this;
      }
      public Builder clearIsValid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isValid_ = false;
        onChanged();
        return this;
      }
      
      // optional .Diadoc.Api.Proto.CertificateVerificationResult CertificateStatus = 2;
      private Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult certificateStatus_ = Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.Builder, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResultOrBuilder> certificateStatusBuilder_;
      public boolean hasCertificateStatus() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult getCertificateStatus() {
        if (certificateStatusBuilder_ == null) {
          return certificateStatus_;
        } else {
          return certificateStatusBuilder_.getMessage();
        }
      }
      public Builder setCertificateStatus(Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult value) {
        if (certificateStatusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          certificateStatus_ = value;
          onChanged();
        } else {
          certificateStatusBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setCertificateStatus(
          Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.Builder builderForValue) {
        if (certificateStatusBuilder_ == null) {
          certificateStatus_ = builderForValue.build();
          onChanged();
        } else {
          certificateStatusBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeCertificateStatus(Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult value) {
        if (certificateStatusBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              certificateStatus_ != Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.getDefaultInstance()) {
            certificateStatus_ =
              Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.newBuilder(certificateStatus_).mergeFrom(value).buildPartial();
          } else {
            certificateStatus_ = value;
          }
          onChanged();
        } else {
          certificateStatusBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearCertificateStatus() {
        if (certificateStatusBuilder_ == null) {
          certificateStatus_ = Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.getDefaultInstance();
          onChanged();
        } else {
          certificateStatusBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.Builder getCertificateStatusBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getCertificateStatusFieldBuilder().getBuilder();
      }
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResultOrBuilder getCertificateStatusOrBuilder() {
        if (certificateStatusBuilder_ != null) {
          return certificateStatusBuilder_.getMessageOrBuilder();
        } else {
          return certificateStatus_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.Builder, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResultOrBuilder> 
          getCertificateStatusFieldBuilder() {
        if (certificateStatusBuilder_ == null) {
          certificateStatusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.Builder, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResultOrBuilder>(
                  certificateStatus_,
                  getParentForChildren(),
                  isClean());
          certificateStatus_ = null;
        }
        return certificateStatusBuilder_;
      }
      
      // optional .Diadoc.Api.Proto.Timestamp SignatureTimestamp = 3;
      private Diadoc.Api.Proto.TimestampProtos.Timestamp signatureTimestamp_ = Diadoc.Api.Proto.TimestampProtos.Timestamp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          Diadoc.Api.Proto.TimestampProtos.Timestamp, Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder, Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder> signatureTimestampBuilder_;
      public boolean hasSignatureTimestamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public Diadoc.Api.Proto.TimestampProtos.Timestamp getSignatureTimestamp() {
        if (signatureTimestampBuilder_ == null) {
          return signatureTimestamp_;
        } else {
          return signatureTimestampBuilder_.getMessage();
        }
      }
      public Builder setSignatureTimestamp(Diadoc.Api.Proto.TimestampProtos.Timestamp value) {
        if (signatureTimestampBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          signatureTimestamp_ = value;
          onChanged();
        } else {
          signatureTimestampBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setSignatureTimestamp(
          Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder builderForValue) {
        if (signatureTimestampBuilder_ == null) {
          signatureTimestamp_ = builderForValue.build();
          onChanged();
        } else {
          signatureTimestampBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeSignatureTimestamp(Diadoc.Api.Proto.TimestampProtos.Timestamp value) {
        if (signatureTimestampBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              signatureTimestamp_ != Diadoc.Api.Proto.TimestampProtos.Timestamp.getDefaultInstance()) {
            signatureTimestamp_ =
              Diadoc.Api.Proto.TimestampProtos.Timestamp.newBuilder(signatureTimestamp_).mergeFrom(value).buildPartial();
          } else {
            signatureTimestamp_ = value;
          }
          onChanged();
        } else {
          signatureTimestampBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearSignatureTimestamp() {
        if (signatureTimestampBuilder_ == null) {
          signatureTimestamp_ = Diadoc.Api.Proto.TimestampProtos.Timestamp.getDefaultInstance();
          onChanged();
        } else {
          signatureTimestampBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder getSignatureTimestampBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSignatureTimestampFieldBuilder().getBuilder();
      }
      public Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder getSignatureTimestampOrBuilder() {
        if (signatureTimestampBuilder_ != null) {
          return signatureTimestampBuilder_.getMessageOrBuilder();
        } else {
          return signatureTimestamp_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          Diadoc.Api.Proto.TimestampProtos.Timestamp, Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder, Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder> 
          getSignatureTimestampFieldBuilder() {
        if (signatureTimestampBuilder_ == null) {
          signatureTimestampBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              Diadoc.Api.Proto.TimestampProtos.Timestamp, Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder, Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder>(
                  signatureTimestamp_,
                  getParentForChildren(),
                  isClean());
          signatureTimestamp_ = null;
        }
        return signatureTimestampBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:Diadoc.Api.Proto.SignatureVerificationResult)
    }
    
    static {
      defaultInstance = new SignatureVerificationResult(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.SignatureVerificationResult)
  }
  
  public interface CertificateVerificationResultOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required bool IsValid = 2;
    boolean hasIsValid();
    boolean getIsValid();
    
    // repeated .Diadoc.Api.Proto.CertificateChainElement CertificateChain = 3;
    java.util.List<Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement> 
        getCertificateChainList();
    Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement getCertificateChain(int index);
    int getCertificateChainCount();
    java.util.List<? extends Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElementOrBuilder> 
        getCertificateChainOrBuilderList();
    Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElementOrBuilder getCertificateChainOrBuilder(
        int index);
    
    // required .Diadoc.Api.Proto.Timestamp VerificationTime = 4;
    boolean hasVerificationTime();
    Diadoc.Api.Proto.TimestampProtos.Timestamp getVerificationTime();
    Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder getVerificationTimeOrBuilder();
  }
  public static final class CertificateVerificationResult extends
      com.google.protobuf.GeneratedMessage
      implements CertificateVerificationResultOrBuilder {
    // Use CertificateVerificationResult.newBuilder() to construct.
    private CertificateVerificationResult(Builder builder) {
      super(builder);
    }
    private CertificateVerificationResult(boolean noInit) {}
    
    private static final CertificateVerificationResult defaultInstance;
    public static CertificateVerificationResult getDefaultInstance() {
      return defaultInstance;
    }
    
    public CertificateVerificationResult getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_CertificateVerificationResult_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_CertificateVerificationResult_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required bool IsValid = 2;
    public static final int ISVALID_FIELD_NUMBER = 2;
    private boolean isValid_;
    public boolean hasIsValid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public boolean getIsValid() {
      return isValid_;
    }
    
    // repeated .Diadoc.Api.Proto.CertificateChainElement CertificateChain = 3;
    public static final int CERTIFICATECHAIN_FIELD_NUMBER = 3;
    private java.util.List<Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement> certificateChain_;
    public java.util.List<Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement> getCertificateChainList() {
      return certificateChain_;
    }
    public java.util.List<? extends Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElementOrBuilder> 
        getCertificateChainOrBuilderList() {
      return certificateChain_;
    }
    public int getCertificateChainCount() {
      return certificateChain_.size();
    }
    public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement getCertificateChain(int index) {
      return certificateChain_.get(index);
    }
    public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElementOrBuilder getCertificateChainOrBuilder(
        int index) {
      return certificateChain_.get(index);
    }
    
    // required .Diadoc.Api.Proto.Timestamp VerificationTime = 4;
    public static final int VERIFICATIONTIME_FIELD_NUMBER = 4;
    private Diadoc.Api.Proto.TimestampProtos.Timestamp verificationTime_;
    public boolean hasVerificationTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public Diadoc.Api.Proto.TimestampProtos.Timestamp getVerificationTime() {
      return verificationTime_;
    }
    public Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder getVerificationTimeOrBuilder() {
      return verificationTime_;
    }
    
    private void initFields() {
      isValid_ = false;
      certificateChain_ = java.util.Collections.emptyList();
      verificationTime_ = Diadoc.Api.Proto.TimestampProtos.Timestamp.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasIsValid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVerificationTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getCertificateChainCount(); i++) {
        if (!getCertificateChain(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getVerificationTime().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(2, isValid_);
      }
      for (int i = 0; i < certificateChain_.size(); i++) {
        output.writeMessage(3, certificateChain_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(4, verificationTime_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isValid_);
      }
      for (int i = 0; i < certificateChain_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, certificateChain_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, verificationTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_CertificateVerificationResult_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_CertificateVerificationResult_fieldAccessorTable;
      }
      
      // Construct using Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCertificateChainFieldBuilder();
          getVerificationTimeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        isValid_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (certificateChainBuilder_ == null) {
          certificateChain_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          certificateChainBuilder_.clear();
        }
        if (verificationTimeBuilder_ == null) {
          verificationTime_ = Diadoc.Api.Proto.TimestampProtos.Timestamp.getDefaultInstance();
        } else {
          verificationTimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.getDescriptor();
      }
      
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult getDefaultInstanceForType() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.getDefaultInstance();
      }
      
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult build() {
        Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult buildPartial() {
        Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult result = new Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isValid_ = isValid_;
        if (certificateChainBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            certificateChain_ = java.util.Collections.unmodifiableList(certificateChain_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.certificateChain_ = certificateChain_;
        } else {
          result.certificateChain_ = certificateChainBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        if (verificationTimeBuilder_ == null) {
          result.verificationTime_ = verificationTime_;
        } else {
          result.verificationTime_ = verificationTimeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult) {
          return mergeFrom((Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult other) {
        if (other == Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.getDefaultInstance()) return this;
        if (other.hasIsValid()) {
          setIsValid(other.getIsValid());
        }
        if (certificateChainBuilder_ == null) {
          if (!other.certificateChain_.isEmpty()) {
            if (certificateChain_.isEmpty()) {
              certificateChain_ = other.certificateChain_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCertificateChainIsMutable();
              certificateChain_.addAll(other.certificateChain_);
            }
            onChanged();
          }
        } else {
          if (!other.certificateChain_.isEmpty()) {
            if (certificateChainBuilder_.isEmpty()) {
              certificateChainBuilder_.dispose();
              certificateChainBuilder_ = null;
              certificateChain_ = other.certificateChain_;
              bitField0_ = (bitField0_ & ~0x00000002);
              certificateChainBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCertificateChainFieldBuilder() : null;
            } else {
              certificateChainBuilder_.addAllMessages(other.certificateChain_);
            }
          }
        }
        if (other.hasVerificationTime()) {
          mergeVerificationTime(other.getVerificationTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasIsValid()) {
          
          return false;
        }
        if (!hasVerificationTime()) {
          
          return false;
        }
        for (int i = 0; i < getCertificateChainCount(); i++) {
          if (!getCertificateChain(i).isInitialized()) {
            
            return false;
          }
        }
        if (!getVerificationTime().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              isValid_ = input.readBool();
              break;
            }
            case 26: {
              Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder subBuilder = Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addCertificateChain(subBuilder.buildPartial());
              break;
            }
            case 34: {
              Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder subBuilder = Diadoc.Api.Proto.TimestampProtos.Timestamp.newBuilder();
              if (hasVerificationTime()) {
                subBuilder.mergeFrom(getVerificationTime());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setVerificationTime(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required bool IsValid = 2;
      private boolean isValid_ ;
      public boolean hasIsValid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public boolean getIsValid() {
        return isValid_;
      }
      public Builder setIsValid(boolean value) {
        bitField0_ |= 0x00000001;
        isValid_ = value;
        onChanged();
        return this;
      }
      public Builder clearIsValid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isValid_ = false;
        onChanged();
        return this;
      }
      
      // repeated .Diadoc.Api.Proto.CertificateChainElement CertificateChain = 3;
      private java.util.List<Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement> certificateChain_ =
        java.util.Collections.emptyList();
      private void ensureCertificateChainIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          certificateChain_ = new java.util.ArrayList<Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement>(certificateChain_);
          bitField0_ |= 0x00000002;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElementOrBuilder> certificateChainBuilder_;
      
      public java.util.List<Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement> getCertificateChainList() {
        if (certificateChainBuilder_ == null) {
          return java.util.Collections.unmodifiableList(certificateChain_);
        } else {
          return certificateChainBuilder_.getMessageList();
        }
      }
      public int getCertificateChainCount() {
        if (certificateChainBuilder_ == null) {
          return certificateChain_.size();
        } else {
          return certificateChainBuilder_.getCount();
        }
      }
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement getCertificateChain(int index) {
        if (certificateChainBuilder_ == null) {
          return certificateChain_.get(index);
        } else {
          return certificateChainBuilder_.getMessage(index);
        }
      }
      public Builder setCertificateChain(
          int index, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement value) {
        if (certificateChainBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCertificateChainIsMutable();
          certificateChain_.set(index, value);
          onChanged();
        } else {
          certificateChainBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setCertificateChain(
          int index, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder builderForValue) {
        if (certificateChainBuilder_ == null) {
          ensureCertificateChainIsMutable();
          certificateChain_.set(index, builderForValue.build());
          onChanged();
        } else {
          certificateChainBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addCertificateChain(Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement value) {
        if (certificateChainBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCertificateChainIsMutable();
          certificateChain_.add(value);
          onChanged();
        } else {
          certificateChainBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addCertificateChain(
          int index, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement value) {
        if (certificateChainBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCertificateChainIsMutable();
          certificateChain_.add(index, value);
          onChanged();
        } else {
          certificateChainBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addCertificateChain(
          Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder builderForValue) {
        if (certificateChainBuilder_ == null) {
          ensureCertificateChainIsMutable();
          certificateChain_.add(builderForValue.build());
          onChanged();
        } else {
          certificateChainBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addCertificateChain(
          int index, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder builderForValue) {
        if (certificateChainBuilder_ == null) {
          ensureCertificateChainIsMutable();
          certificateChain_.add(index, builderForValue.build());
          onChanged();
        } else {
          certificateChainBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllCertificateChain(
          java.lang.Iterable<? extends Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement> values) {
        if (certificateChainBuilder_ == null) {
          ensureCertificateChainIsMutable();
          super.addAll(values, certificateChain_);
          onChanged();
        } else {
          certificateChainBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearCertificateChain() {
        if (certificateChainBuilder_ == null) {
          certificateChain_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          certificateChainBuilder_.clear();
        }
        return this;
      }
      public Builder removeCertificateChain(int index) {
        if (certificateChainBuilder_ == null) {
          ensureCertificateChainIsMutable();
          certificateChain_.remove(index);
          onChanged();
        } else {
          certificateChainBuilder_.remove(index);
        }
        return this;
      }
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder getCertificateChainBuilder(
          int index) {
        return getCertificateChainFieldBuilder().getBuilder(index);
      }
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElementOrBuilder getCertificateChainOrBuilder(
          int index) {
        if (certificateChainBuilder_ == null) {
          return certificateChain_.get(index);  } else {
          return certificateChainBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElementOrBuilder> 
           getCertificateChainOrBuilderList() {
        if (certificateChainBuilder_ != null) {
          return certificateChainBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(certificateChain_);
        }
      }
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder addCertificateChainBuilder() {
        return getCertificateChainFieldBuilder().addBuilder(
            Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.getDefaultInstance());
      }
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder addCertificateChainBuilder(
          int index) {
        return getCertificateChainFieldBuilder().addBuilder(
            index, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.getDefaultInstance());
      }
      public java.util.List<Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder> 
           getCertificateChainBuilderList() {
        return getCertificateChainFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElementOrBuilder> 
          getCertificateChainFieldBuilder() {
        if (certificateChainBuilder_ == null) {
          certificateChainBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder, Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElementOrBuilder>(
                  certificateChain_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          certificateChain_ = null;
        }
        return certificateChainBuilder_;
      }
      
      // required .Diadoc.Api.Proto.Timestamp VerificationTime = 4;
      private Diadoc.Api.Proto.TimestampProtos.Timestamp verificationTime_ = Diadoc.Api.Proto.TimestampProtos.Timestamp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          Diadoc.Api.Proto.TimestampProtos.Timestamp, Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder, Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder> verificationTimeBuilder_;
      public boolean hasVerificationTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public Diadoc.Api.Proto.TimestampProtos.Timestamp getVerificationTime() {
        if (verificationTimeBuilder_ == null) {
          return verificationTime_;
        } else {
          return verificationTimeBuilder_.getMessage();
        }
      }
      public Builder setVerificationTime(Diadoc.Api.Proto.TimestampProtos.Timestamp value) {
        if (verificationTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          verificationTime_ = value;
          onChanged();
        } else {
          verificationTimeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setVerificationTime(
          Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder builderForValue) {
        if (verificationTimeBuilder_ == null) {
          verificationTime_ = builderForValue.build();
          onChanged();
        } else {
          verificationTimeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeVerificationTime(Diadoc.Api.Proto.TimestampProtos.Timestamp value) {
        if (verificationTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              verificationTime_ != Diadoc.Api.Proto.TimestampProtos.Timestamp.getDefaultInstance()) {
            verificationTime_ =
              Diadoc.Api.Proto.TimestampProtos.Timestamp.newBuilder(verificationTime_).mergeFrom(value).buildPartial();
          } else {
            verificationTime_ = value;
          }
          onChanged();
        } else {
          verificationTimeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearVerificationTime() {
        if (verificationTimeBuilder_ == null) {
          verificationTime_ = Diadoc.Api.Proto.TimestampProtos.Timestamp.getDefaultInstance();
          onChanged();
        } else {
          verificationTimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder getVerificationTimeBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getVerificationTimeFieldBuilder().getBuilder();
      }
      public Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder getVerificationTimeOrBuilder() {
        if (verificationTimeBuilder_ != null) {
          return verificationTimeBuilder_.getMessageOrBuilder();
        } else {
          return verificationTime_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          Diadoc.Api.Proto.TimestampProtos.Timestamp, Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder, Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder> 
          getVerificationTimeFieldBuilder() {
        if (verificationTimeBuilder_ == null) {
          verificationTimeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              Diadoc.Api.Proto.TimestampProtos.Timestamp, Diadoc.Api.Proto.TimestampProtos.Timestamp.Builder, Diadoc.Api.Proto.TimestampProtos.TimestampOrBuilder>(
                  verificationTime_,
                  getParentForChildren(),
                  isClean());
          verificationTime_ = null;
        }
        return verificationTimeBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:Diadoc.Api.Proto.CertificateVerificationResult)
    }
    
    static {
      defaultInstance = new CertificateVerificationResult(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.CertificateVerificationResult)
  }
  
  public interface CertificateChainElementOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 CertificateChainStatusFlags = 1;
    boolean hasCertificateChainStatusFlags();
    int getCertificateChainStatusFlags();
    
    // required bytes DerCertificate = 2;
    boolean hasDerCertificate();
    com.google.protobuf.ByteString getDerCertificate();
  }
  public static final class CertificateChainElement extends
      com.google.protobuf.GeneratedMessage
      implements CertificateChainElementOrBuilder {
    // Use CertificateChainElement.newBuilder() to construct.
    private CertificateChainElement(Builder builder) {
      super(builder);
    }
    private CertificateChainElement(boolean noInit) {}
    
    private static final CertificateChainElement defaultInstance;
    public static CertificateChainElement getDefaultInstance() {
      return defaultInstance;
    }
    
    public CertificateChainElement getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_CertificateChainElement_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_CertificateChainElement_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 CertificateChainStatusFlags = 1;
    public static final int CERTIFICATECHAINSTATUSFLAGS_FIELD_NUMBER = 1;
    private int certificateChainStatusFlags_;
    public boolean hasCertificateChainStatusFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getCertificateChainStatusFlags() {
      return certificateChainStatusFlags_;
    }
    
    // required bytes DerCertificate = 2;
    public static final int DERCERTIFICATE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString derCertificate_;
    public boolean hasDerCertificate() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.google.protobuf.ByteString getDerCertificate() {
      return derCertificate_;
    }
    
    private void initFields() {
      certificateChainStatusFlags_ = 0;
      derCertificate_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasCertificateChainStatusFlags()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDerCertificate()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, certificateChainStatusFlags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, derCertificate_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, certificateChainStatusFlags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, derCertificate_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_CertificateChainElement_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.internal_static_Diadoc_Api_Proto_CertificateChainElement_fieldAccessorTable;
      }
      
      // Construct using Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        certificateChainStatusFlags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        derCertificate_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.getDescriptor();
      }
      
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement getDefaultInstanceForType() {
        return Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.getDefaultInstance();
      }
      
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement build() {
        Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement buildPartial() {
        Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement result = new Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.certificateChainStatusFlags_ = certificateChainStatusFlags_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.derCertificate_ = derCertificate_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement) {
          return mergeFrom((Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement other) {
        if (other == Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.getDefaultInstance()) return this;
        if (other.hasCertificateChainStatusFlags()) {
          setCertificateChainStatusFlags(other.getCertificateChainStatusFlags());
        }
        if (other.hasDerCertificate()) {
          setDerCertificate(other.getDerCertificate());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasCertificateChainStatusFlags()) {
          
          return false;
        }
        if (!hasDerCertificate()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              certificateChainStatusFlags_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              derCertificate_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 CertificateChainStatusFlags = 1;
      private int certificateChainStatusFlags_ ;
      public boolean hasCertificateChainStatusFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getCertificateChainStatusFlags() {
        return certificateChainStatusFlags_;
      }
      public Builder setCertificateChainStatusFlags(int value) {
        bitField0_ |= 0x00000001;
        certificateChainStatusFlags_ = value;
        onChanged();
        return this;
      }
      public Builder clearCertificateChainStatusFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        certificateChainStatusFlags_ = 0;
        onChanged();
        return this;
      }
      
      // required bytes DerCertificate = 2;
      private com.google.protobuf.ByteString derCertificate_ = com.google.protobuf.ByteString.EMPTY;
      public boolean hasDerCertificate() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.google.protobuf.ByteString getDerCertificate() {
        return derCertificate_;
      }
      public Builder setDerCertificate(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        derCertificate_ = value;
        onChanged();
        return this;
      }
      public Builder clearDerCertificate() {
        bitField0_ = (bitField0_ & ~0x00000002);
        derCertificate_ = getDefaultInstance().getDerCertificate();
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Diadoc.Api.Proto.CertificateChainElement)
    }
    
    static {
      defaultInstance = new CertificateChainElement(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.CertificateChainElement)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Diadoc_Api_Proto_SignatureVerificationResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Diadoc_Api_Proto_SignatureVerificationResult_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Diadoc_Api_Proto_CertificateVerificationResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Diadoc_Api_Proto_CertificateVerificationResult_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Diadoc_Api_Proto_CertificateChainElement_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Diadoc_Api_Proto_CertificateChainElement_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n!SignatureVerificationResult.proto\022\020Dia" +
      "doc.Api.Proto\032\017Timestamp.proto\"\263\001\n\033Signa" +
      "tureVerificationResult\022\017\n\007IsValid\030\001 \002(\010\022" +
      "J\n\021CertificateStatus\030\002 \001(\0132/.Diadoc.Api." +
      "Proto.CertificateVerificationResult\0227\n\022S" +
      "ignatureTimestamp\030\003 \001(\0132\033.Diadoc.Api.Pro" +
      "to.Timestamp\"\254\001\n\035CertificateVerification" +
      "Result\022\017\n\007IsValid\030\002 \002(\010\022C\n\020CertificateCh" +
      "ain\030\003 \003(\0132).Diadoc.Api.Proto.Certificate" +
      "ChainElement\0225\n\020VerificationTime\030\004 \002(\0132\033",
      ".Diadoc.Api.Proto.Timestamp\"V\n\027Certifica" +
      "teChainElement\022#\n\033CertificateChainStatus" +
      "Flags\030\001 \002(\005\022\026\n\016DerCertificate\030\002 \002(\014B#B!S" +
      "ignatureVerificationResultProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_Diadoc_Api_Proto_SignatureVerificationResult_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_Diadoc_Api_Proto_SignatureVerificationResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Diadoc_Api_Proto_SignatureVerificationResult_descriptor,
              new java.lang.String[] { "IsValid", "CertificateStatus", "SignatureTimestamp", },
              Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult.class,
              Diadoc.Api.Proto.SignatureVerificationResultProtos.SignatureVerificationResult.Builder.class);
          internal_static_Diadoc_Api_Proto_CertificateVerificationResult_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_Diadoc_Api_Proto_CertificateVerificationResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Diadoc_Api_Proto_CertificateVerificationResult_descriptor,
              new java.lang.String[] { "IsValid", "CertificateChain", "VerificationTime", },
              Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.class,
              Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateVerificationResult.Builder.class);
          internal_static_Diadoc_Api_Proto_CertificateChainElement_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_Diadoc_Api_Proto_CertificateChainElement_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Diadoc_Api_Proto_CertificateChainElement_descriptor,
              new java.lang.String[] { "CertificateChainStatusFlags", "DerCertificate", },
              Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.class,
              Diadoc.Api.Proto.SignatureVerificationResultProtos.CertificateChainElement.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          Diadoc.Api.Proto.TimestampProtos.getDescriptor(),
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
